1. Git Intro and Architecture

Keeps tracks of changes in files. Created by Linus Torvalds.

Commit - A state of a file.

Current commit = the head. Head can be moved between commits.

------------------------------
2. Install and Configure Git

#For RHEL-based systems:
sudo yum install git


#Returns current git config.
git config -l

Will want two pieces of info to give to Git, name and email.

#Gives git a name at the user level
git config --global user.name "Andy Li"

#gives git an email at the user level
git config --global user.email "email@email.com"

#Set preferred text editor for Git at for the entire system.
git config --system core.editor vim

Can also create system-wide configurations in the config files

/etc/config - Config files at the system level.
~/.gitconfig - Config files at the user level
.git/config - Config files at the local level.


---------------------------------------
3. Working with Repositories in Git

Repository - group of content.

#Creates a repository in current directory.
git init

#Get status of Repository
git status

Git won't track files automatically. Must add them first for Git to track.

#Adds files for git to track in the commit.
git add <file>

#Tells git to track state of the file. -m lets you add a message to the commit.
git commmit -m <message>

Git will know if a commited file has been changes. Must re-add then commit to track new state.
Git will make you add a message if you don't include the -m flag. It will open a text editor and make you add one if you don't.

#Lists a history of commits.
git log

#Removes file from being tracked by repository and the file itself.
git rm <file>

#Recovers a file that's been deleted that git is tracking.
git checkout -- <file>

------------------------------------------
4. gitignore

Tell git not to track certain files or specific kinds of files by creating a .gitignore file in a repo, but may need them for a project.
Works with directories as well.

vim .gitignore

Add file/directory name per line. Wildcard supported.

#Can also exclude paths using the following command:
git config --global core.excludesfile <path>


-----------------------------------------
5. Cloning Repositories

Each repo is unique to its own directory structure.

#Creates a copy of the repo.
git clone <source> <target>

Can also clone over ssh/https as well.

#Clones a repo from github.com
git clone https://github.com/linuxacademy/content-git-quickstart ~/quickstartclone

#Push changesd back to the master copy
git push origin master

----------------------------------------------
6. Git Logging

#More general information about git log. Less detailed info.
git log --oneline

#Gives more detailed info about logs.
git log -p

Can use / while in this mode to search for a particular keyword. Press N to cycle to the next result.

#returns logs relevant to a particular file.
git log -- <file>

#Returns oneline form of results from a particular file.
git log --oneline <file>

#Returns a more graphical representation of a log history. Helpful when dealing w/ multiple branches.
git log --graph --decorate

--------------------------------------------
7. Branches in git

Allows you to reate copies of master without interfering the master branch. Usually branches are created to deal with a particular goal in mind.
Can even create branches off of branches.

#Create the branch
git branch <New branch name>

#Move to the new branch
git checkout <new branch's name>

#tells you what branch you're currently on.
git status

Now you can work on the branch and not interfere with the master.

#Switch back to master.
git checkout master

Notice that if you switch back to the master, you won't see the redesign branch.

#Create and switch to new branch
git checkout -b <new branch name>

#-a Adds and commits in one command.
git commit -am "fixed toc"

---------------------------------------------
8. Merging and Pushes in git

Push moves changes to the origin.

#pushes a branch to the origin (usually master)
git push <target> <Branch to be pushed>

#pushes all branches to origin
git push origin --all

To merge, checkout to target branch. Usually to master.

#Merges a branch to the master.
git merge <branch to be merged>
